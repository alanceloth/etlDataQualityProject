{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Data Quality Project","text":""},{"location":"#fluxo","title":"Fluxo","text":"<pre><code>graph TD;\n    A[Configura Vari\u00e1veis] --&gt; B[Ler o Banco SQL];\n    B --&gt; V[Valida\u00e7\u00e3o do Schema de Entrada];\n    V --&gt;|Falha| X[Alerta de Erro];\n    V --&gt;|Sucesso| C[Transformar os KPIs];\n    C --&gt; Y[Valida\u00e7\u00e3o do Schema de Sa\u00edda];\n    Y --&gt;|Falha| Z[Alerta de Erro];\n    Y --&gt;|Sucesso| D[Salvar no DuckDB];\n</code></pre>"},{"location":"#contrato-de-dados","title":"Contrato de dados","text":"<p>             Bases: <code>SchemaModel</code></p> <p>Define o esquema para a valida\u00e7\u00e3o de dados de produtos com Pandera.</p> <p>Este esquema inclui campos b\u00e1sicos para produtos, incluindo um campo de e-mail validado por uma express\u00e3o regular.</p> <p>Attributes:</p> Name Type Description <code>id_produto</code> <code>Series[int]</code> <p>Identificador do produto, deve estar entre 1 e 20.</p> <code>nome</code> <code>Series[str]</code> <p>Nome do produto.</p> <code>quantidade</code> <code>Series[int]</code> <p>Quantidade dispon\u00edvel do produto, deve estar entre 20 e 200.</p> <code>preco</code> <code>Series[float]</code> <p>Pre\u00e7o do produto, deve estar entre 5.0 e 120.0.</p> <code>categoria</code> <code>Series[str]</code> <p>Categoria do produto.</p> <code>email</code> <code>Series[str]</code> <p>E-mail associado ao produto, deve seguir o formato padr\u00e3o de e-mails.</p> Source code in <code>app\\schema.py</code> <pre><code>class ProductSchema(pa.SchemaModel):\n    \"\"\"\n    Define o esquema para a valida\u00e7\u00e3o de dados de produtos com Pandera.\n\n    Este esquema inclui campos b\u00e1sicos para produtos, incluindo um campo de e-mail\n    validado por uma express\u00e3o regular.\n\n    Attributes:\n        id_produto (Series[int]): Identificador do produto, deve estar entre 1 e 20.\n        nome (Series[str]): Nome do produto.\n        quantidade (Series[int]): Quantidade dispon\u00edvel do produto, deve estar entre 20 e 200.\n        preco (Series[float]): Pre\u00e7o do produto, deve estar entre 5.0 e 120.0.\n        categoria (Series[str]): Categoria do produto.\n        email (Series[str]): E-mail associado ao produto, deve seguir o formato padr\u00e3o de e-mails.\n    \"\"\"\n    id_produto: Series[int]\n    nome: Series[str]\n    quantidade: Series[int] = pa.Field(ge=0, le=200)\n    preco: Series[float] = pa.Field(ge=05.0, le=120.0)\n    categoria: Series[str]\n    email: Series[str] = pa.Field(regex=email_regex)\n\n    class Config:\n        coerce = True\n        strict = True\n</code></pre>"},{"location":"#transformacoes","title":"Transformacoes","text":""},{"location":"#configura-variaveis","title":"Configura Vari\u00e1veis","text":"<p>Load settings from .env file</p> Source code in <code>app\\etl.py</code> <pre><code>def load_settings():\n    \"\"\"Load settings from .env file\"\"\"\n    env_path = Path.cwd() / '.env'\n    #load_dotenv(dotenv_path=env_path)\n    env = dotenv_values(env_path, encoding=\"utf-8\")\n    settings = {\n        \"db_host\": env.get(\"POSTGREST_HOST\"),\n        \"db_user\": env.get(\"POSTGREST_USER\"),\n        \"db_pass\": env.get(\"POSTGREST_PASSWORD\"),\n        \"db_port\": env.get(\"POSTGREST_PORT\"),\n        \"db_name\": env.get(\"POSTGREST_DATABASE\")\n    }\n\n    return settings\n</code></pre>"},{"location":"#ler-o-banco-sql","title":"Ler o Banco SQL","text":"<p>Extrai dados do banco de dados SQL usando a consulta fornecida.</p> <p>Parameters:</p> Name Type Description Default <code>query</code> <code>str</code> <p>A consulta SQL para extrair dados.</p> required <p>Returns:</p> Type Description <code>DataFrame</code> <p>Um DataFrame do Pandas contendo os dados extra\u00eddos.</p> Source code in <code>app\\etl.py</code> <pre><code>@pa.check_output(ProductSchema, lazy=True)\ndef extract(query: str) -&gt; pd.DataFrame:\n    \"\"\"\n    Extrai dados do banco de dados SQL usando a consulta fornecida.\n\n    Args:\n        query: A consulta SQL para extrair dados.\n\n    Returns:\n        Um DataFrame do Pandas contendo os dados extra\u00eddos.\n    \"\"\"\n    settings = load_settings()\n    connection_string = f\"postgresql://{settings['db_user']}:{settings['db_pass']}@{settings['db_host']}:{settings['db_port']}/{settings['db_name']}\"\n    engine = create_engine(connection_string)\n\n    with engine.connect() as conn, conn.begin():\n        df_crm = pd.read_sql(text(query), conn)\n\n    return df_crm\n</code></pre>"},{"location":"#transformar-os-kpis","title":"Transformar os KPIs","text":"<p>Transforma os dados do DataFrame aplicando c\u00e1lculos e normaliza\u00e7\u00f5es.</p> <p>Parameters:</p> Name Type Description Default <code>df</code> <code>DataFrame</code> <p>DataFrame do Pandas contendo os dados originais.</p> required <p>Returns:</p> Type Description <code>DataFrame</code> <p>DataFrame do Pandas ap\u00f3s a aplica\u00e7\u00e3o das transforma\u00e7\u00f5es.</p> Source code in <code>app\\etl.py</code> <pre><code>@pa.check_input(ProductSchema, lazy=True)\n@pa.check_output(ProductSchemaKPI, lazy=True)\ndef transform(df: pd.DataFrame) -&gt; pd.DataFrame:\n    \"\"\"\n    Transforma os dados do DataFrame aplicando c\u00e1lculos e normaliza\u00e7\u00f5es.\n\n    Args:\n        df: DataFrame do Pandas contendo os dados originais.\n\n    Returns:\n        DataFrame do Pandas ap\u00f3s a aplica\u00e7\u00e3o das transforma\u00e7\u00f5es.\n    \"\"\"\n    # Calcular valor_total_estoque\n    df['valor_total_estoque'] = df['quantidade'] * df['preco']\n\n    # Normalizar categoria para mai\u00fasculas\n    df['categoria_normalizada'] = df['categoria'].str.upper()\n\n    # Determinar disponibilidade (True se quantidade &gt; 0)\n    df['disponibilidade'] = df['quantidade'] &gt; 0\n\n    return df\n</code></pre>"},{"location":"#salvar-no-duckdb","title":"Salvar no DuckDB","text":"<p>Carrega o DataFrame no DuckDB, criando ou substituindo a tabela especificada.</p> <p>Parameters:</p> Name Type Description Default <code>df</code> <code>DataFrame</code> <p>DataFrame do Pandas para ser carregado no DuckDB.</p> required <code>table_name</code> <code>str</code> <p>Nome da tabela no DuckDB onde os dados ser\u00e3o inseridos.</p> required <code>db_file</code> <code>str</code> <p>Caminho para o arquivo DuckDB. Se n\u00e3o existir, ser\u00e1 criado.</p> <code>'my_duckdb.db'</code> Source code in <code>app\\etl.py</code> <pre><code>@pa.check_input(ProductSchemaKPI, lazy=True)\ndef load(df: pd.DataFrame, table_name: str, db_file: str = 'my_duckdb.db'):\n    \"\"\"\n    Carrega o DataFrame no DuckDB, criando ou substituindo a tabela especificada.\n\n    Args:\n        df: DataFrame do Pandas para ser carregado no DuckDB.\n        table_name: Nome da tabela no DuckDB onde os dados ser\u00e3o inseridos.\n        db_file: Caminho para o arquivo DuckDB. Se n\u00e3o existir, ser\u00e1 criado.\n    \"\"\"\n    con = duckdb.connect(database=db_file, read_only=False)\n\n    con.register('df_temp', df)\n\n    con.execute(f\"CREATE OR REPLACE TABLE {table_name} AS SELECT * FROM df_temp\")\n\n    con.close()\n</code></pre>"},{"location":"#testes","title":"Testes","text":""},{"location":"#teste-calculo-do-valor-total-de-estoque","title":"Teste calculo do valor total de estoque","text":"<p>Test for the calculation of the total stock value, including preparation, action, and verification steps.</p> Source code in <code>tests\\test_func_etl.py</code> <pre><code>def test_calculo_valor_total_estoque():\n    \"\"\"\n    Test for the calculation of the total stock value, including preparation, action, and verification steps.\n    \"\"\"\n    # Prepara\u00e7\u00e3o\n    df = pd.DataFrame({\n        'id_produto': [1, 2],\n        'nome': ['blusa', 'camisa'],\n        'quantidade': [10, 5],\n        'preco': [20.0, 100.0],\n        'categoria': ['brinquedos', 'eletr\u00f4nicos'],\n        'email': ['produtoA@example.com', 'produtoB@example.com']\n    })\n    expected = pd.Series([200.0, 500.0], name='valor_total_estoque')\n\n    # A\u00e7\u00e3o\n    result = transform(df)\n\n    # Verifica\u00e7\u00e3o\n    pd.testing.assert_series_equal(result['valor_total_estoque'], expected)\n</code></pre>"},{"location":"#teste-normalizacao-de-categoria","title":"Teste normaliza\u00e7\u00e3o de categoria","text":"<p>Test function for normalizing category data.</p> Source code in <code>tests\\test_func_etl.py</code> <pre><code>def test_normalizacao_categoria():\n    \"\"\"\n    Test function for normalizing category data.\n    \"\"\"\n    # Prepara\u00e7\u00e3o\n    df = pd.DataFrame({\n        'id_produto': [1, 2],\n        'nome': ['blusa', 'camisa'],\n        'quantidade': [1, 2],\n        'preco': [10.0, 20.0],\n        'categoria': ['brinquedos', 'eletr\u00f4nicos'],\n        'email': ['produtoA@example.com', 'produtoB@example.com']\n    })\n    expected = pd.Series(['BRINQUEDOS', 'ELETR\u00d4NICOS'], name='categoria_normalizada')\n\n    # A\u00e7\u00e3o\n    result = transform(df)\n\n    # Verifica\u00e7\u00e3o\n    pd.testing.assert_series_equal(result['categoria_normalizada'], expected)\n</code></pre>"},{"location":"#teste-de-determinacao-de-disponibilidade","title":"Teste de determina\u00e7\u00e3o de disponibilidade","text":"<p>Test function for determining availability. Sets up a test DataFrame and an expected result, then calls the transform function and verifies the result using pd.testing.assert_series_equal.</p> Source code in <code>tests\\test_func_etl.py</code> <pre><code>def test_determinacao_disponibilidade():\n    \"\"\"\n    Test function for determining availability. Sets up a test DataFrame and an expected result, then calls the transform function and verifies the result using pd.testing.assert_series_equal.\n    \"\"\"\n    # Prepara\u00e7\u00e3o\n    df = pd.DataFrame({\n        'id_produto': [1, 2],\n        'nome': ['blusa', 'camisa'],\n        'quantidade': [0, 2],\n        'preco': [10.0, 20.0],\n        'categoria': ['brinquedos', 'eletr\u00f4nicos'],\n        'email': ['produtoA@example.com', 'produtoB@example.com']\n    })\n    expected = pd.Series([False, True], name='disponibilidade')\n\n    # A\u00e7\u00e3o\n    result = transform(df)\n\n    # Verifica\u00e7\u00e3o\n    pd.testing.assert_series_equal(result['disponibilidade'], expected)\n</code></pre> <p>To use this project structure you will need to follow the steps below.</p>"},{"location":"#requirements","title":"Requirements","text":"<p>To use this project properly, you will need to install: - python - git - pyenv - poetry</p> <p>To install and configure Pyenv and Poetry in Windows, check this video. To learn how to manage multiple python versions using pyenv, check this article.</p>"},{"location":"#poetry-local-environment-config","title":"Poetry local environment config","text":"<p>To create the .venv local folder, type in terminal: *for this project only, add the argument --local at the end of the command. Below is the poetry global settings.</p> <pre><code>poetry config virtualenvs.create true\npoetry config virtualenvs.in-project true\n</code></pre>"},{"location":"#duckdb-install","title":"DuckDB install","text":"<p>Windows:</p> <pre><code>winget install DuckDB.cli\n</code></pre> <p>For other OS, check it: duckdb download page</p>"},{"location":"#installation-steps","title":"Installation Steps","text":""},{"location":"#git-clone","title":"Git Clone","text":"<p>Open a terminal window (cmd, bash, or anything with git commands) and type:</p> <pre><code>git clone https://github.com/alanceloth/etlDataQualityProject.git\ncd etlDataQualityProject\ngit init\n</code></pre>"},{"location":"#create-new-github-repo-from-existing-one","title":"Create new GitHub Repo from existing one","text":"<p>In the terminal window, type:</p> <pre><code>gh repo create\n</code></pre> <p>Choose the third option: Push an existing local repository to GitHub. Choose the current path (just put a dot \".\" and hit enter) Follow the instructions on screen, add a remote called 'master', and that's it!</p>"},{"location":"#setting-up-the-environment","title":"Setting up the environment","text":"<p>We will need python 3.11.5, and to get this version we will use pyenv. In the same terminal window, type:</p> <p>If you never used pyenv, or if you don't have the 3.11.5 version in your pyenv:</p> <pre><code>pyenv update\npyenv install --l\n</code></pre> <p>If you find the 3.11.5, then it's everything correct.</p> <pre><code>pyenv install 3.11.5\n</code></pre> <p>To check the python versions installed, use this:</p> <pre><code>pyenv versions\n</code></pre> <p>You will notice that one of the versions will have a * symbol. This indicates that the system is using this version. You can also check the default python version used by the system with this:</p> <pre><code>which python\n</code></pre> <p>If you have the 3.11.5 version in your pyenv: To use the project python version (3.11.5), use the command below:</p> <pre><code>pyenv local 3.11.5\n</code></pre>"},{"location":"#poetry","title":"Poetry","text":"<p>To initialize the poetry in the project, type in the terminal:</p> <pre><code>poetry env use 3.11.5\npoetry shell\npoetry install --no-root\n</code></pre>"},{"location":"#testing","title":"Testing","text":"<p>In the terminal:</p> <pre><code>duckdb\n</code></pre> <p>If the above code don't work properly, go to the duckdb download page and get the latest zip file. Extract the duckdb.exe and put inside your project folder. This will allow you to use the duckdb in the terminal.</p>"},{"location":"#folder-structure","title":"Folder Structure","text":"<p>The basic project folder structure are shown below.</p> <pre><code>.\n\u251c\u2500\u2500 .vscode\n\u251c\u2500\u2500 docs\n\u251c\u2500\u2500 scripts\n\u251c\u2500\u2500 src\n\u2514\u2500\u2500 tests\n</code></pre> <p>.vscode: VSCODE setting to the project session, like font size. docs: documentation folder, will store the mkdocs index.md scripts: any script related to automation, instalation, compilation, test execution. src: the source code folder tests: the automated test folder to check the source code</p>"},{"location":"#contact","title":"Contact","text":"<p>LinkedIn</p> <p>E-mail: alan.lanceloth@gmail.com</p> <p>GitHub</p>"}]}